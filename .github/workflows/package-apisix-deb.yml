name: Package apisix deb

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_APISIX_OR_VERSION: 2.7

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get install -y make ruby ruby-dev rubygems build-essential
          sudo gem install --no-document fpm
          sudo apt-get install -y rpm
      - name: Run apisix packaging
        run: |
          make package type=deb app=apisix version=2.3 checkout=2.3
          make package type=deb app=apisix version=2.2 checkout=v2.2
          make package type=deb app=apisix version=${BUILD_APISIX_OR_VERSION} checkout=${BUILD_APISIX_OR_VERSION}
          make package type=deb app=apisix version=master checkout=master
      - name: Install apisix deb into container
        run: |
          docker build -t apache/apisix:${BUILD_APISIX_OR_VERSION}-deb-test --build-arg APISIX_VERSION=${BUILD_APISIX_OR_VERSION} -f test/apisix/Dockerfile.test.apisix.deb output
      - name: Start apisix and test
        run: |
          docker run -d --rm --name apisix-${BUILD_APISIX_OR_VERSION}-deb-test -v $(pwd)/test/apisix/config.yaml:/usr/local/apisix/conf/config.yaml -p 9080:9080 -p 9443:9443 apache/apisix:${BUILD_APISIX_OR_VERSION}-deb-test
          sleep 20
          curl http://127.0.0.1:9080/apisix/admin/routes/1 \
           -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' -X PUT -d '
            {
              "uri": "/get",
              "upstream": {
                  "type": "roundrobin",
                  "nodes": {
                      "httpbin.org:80": 1
                  }
              }
            }'
          result_code=`curl -I -m 10 -o /dev/null -s -w %{http_code} http://127.0.0.1:9080/get`
          if [[ $result_code -ne 200 ]]; then
              printf "result_code: %s\n" "$result_code"
              exit 125
          fi